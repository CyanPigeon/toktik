// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.1
// source: api/toktik/favorite/favorite.proto

package favorite

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLikeActionLikeActionSrv = "/LikeAction/LikeActionSrv"

type LikeActionHTTPServer interface {
	LikeActionSrv(context.Context, *LikeActionRequest) (*LikeActionResponse, error)
}

func RegisterLikeActionHTTPServer(s *http.Server, srv LikeActionHTTPServer) {
	r := s.Route("/")
	r.POST("/douyin/favorite/action", _LikeAction_LikeActionSrv0_HTTP_Handler(srv))
}

func _LikeAction_LikeActionSrv0_HTTP_Handler(srv LikeActionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeActionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLikeActionLikeActionSrv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LikeActionSrv(ctx, req.(*LikeActionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeActionResponse)
		return ctx.JSON(200, reply)
	}
}

type LikeActionHTTPClient interface {
	LikeActionSrv(ctx context.Context, req *LikeActionRequest, opts ...http.CallOption) (rsp *LikeActionResponse, err error)
}

type LikeActionHTTPClientImpl struct {
	cc *http.Client
}

func NewLikeActionHTTPClient(client *http.Client) LikeActionHTTPClient {
	return &LikeActionHTTPClientImpl{client}
}

func (c *LikeActionHTTPClientImpl) LikeActionSrv(ctx context.Context, in *LikeActionRequest, opts ...http.CallOption) (*LikeActionResponse, error) {
	var out LikeActionResponse
	pattern := "/douyin/favorite/action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLikeActionLikeActionSrv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationLikeListLikeListSrv = "/LikeList/LikeListSrv"

type LikeListHTTPServer interface {
	LikeListSrv(context.Context, *LikeListRequest) (*LikeListResponse, error)
}

func RegisterLikeListHTTPServer(s *http.Server, srv LikeListHTTPServer) {
	r := s.Route("/")
	r.GET("/douyin/favorite/list", _LikeList_LikeListSrv0_HTTP_Handler(srv))
}

func _LikeList_LikeListSrv0_HTTP_Handler(srv LikeListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LikeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLikeListLikeListSrv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LikeListSrv(ctx, req.(*LikeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LikeListResponse)
		return ctx.Result(200, reply)
	}
}

type LikeListHTTPClient interface {
	LikeListSrv(ctx context.Context, req *LikeListRequest, opts ...http.CallOption) (rsp *LikeListResponse, err error)
}

type LikeListHTTPClientImpl struct {
	cc *http.Client
}

func NewLikeListHTTPClient(client *http.Client) LikeListHTTPClient {
	return &LikeListHTTPClientImpl{client}
}

func (c *LikeListHTTPClientImpl) LikeListSrv(ctx context.Context, in *LikeListRequest, opts ...http.CallOption) (*LikeListResponse, error) {
	var out LikeListResponse
	pattern := "/douyin/favorite/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLikeListLikeListSrv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
