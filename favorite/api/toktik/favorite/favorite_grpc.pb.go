// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: api/toktik/favorite/favorite.proto

package favorite

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LikeAction_LikeActionSrv_FullMethodName = "/LikeAction/LikeActionSrv"
)

// LikeActionClient is the client API for LikeAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeActionClient interface {
	LikeActionSrv(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error)
}

type likeActionClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeActionClient(cc grpc.ClientConnInterface) LikeActionClient {
	return &likeActionClient{cc}
}

func (c *likeActionClient) LikeActionSrv(ctx context.Context, in *LikeActionRequest, opts ...grpc.CallOption) (*LikeActionResponse, error) {
	out := new(LikeActionResponse)
	err := c.cc.Invoke(ctx, LikeAction_LikeActionSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeActionServer is the server API for LikeAction service.
// All implementations must embed UnimplementedLikeActionServer
// for forward compatibility
type LikeActionServer interface {
	LikeActionSrv(context.Context, *LikeActionRequest) (*LikeActionResponse, error)
	mustEmbedUnimplementedLikeActionServer()
}

// UnimplementedLikeActionServer must be embedded to have forward compatible implementations.
type UnimplementedLikeActionServer struct {
}

func (UnimplementedLikeActionServer) LikeActionSrv(context.Context, *LikeActionRequest) (*LikeActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeActionSrv not implemented")
}
func (UnimplementedLikeActionServer) mustEmbedUnimplementedLikeActionServer() {}

// UnsafeLikeActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeActionServer will
// result in compilation errors.
type UnsafeLikeActionServer interface {
	mustEmbedUnimplementedLikeActionServer()
}

func RegisterLikeActionServer(s grpc.ServiceRegistrar, srv LikeActionServer) {
	s.RegisterService(&LikeAction_ServiceDesc, srv)
}

func _LikeAction_LikeActionSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeActionServer).LikeActionSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeAction_LikeActionSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeActionServer).LikeActionSrv(ctx, req.(*LikeActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LikeAction_ServiceDesc is the grpc.ServiceDesc for LikeAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LikeAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LikeAction",
	HandlerType: (*LikeActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeActionSrv",
			Handler:    _LikeAction_LikeActionSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/toktik/favorite/favorite.proto",
}

const (
	LikeList_LikeListSrv_FullMethodName = "/LikeList/LikeListSrv"
)

// LikeListClient is the client API for LikeList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeListClient interface {
	LikeListSrv(ctx context.Context, in *LikeListRequest, opts ...grpc.CallOption) (*LikeListResponse, error)
}

type likeListClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeListClient(cc grpc.ClientConnInterface) LikeListClient {
	return &likeListClient{cc}
}

func (c *likeListClient) LikeListSrv(ctx context.Context, in *LikeListRequest, opts ...grpc.CallOption) (*LikeListResponse, error) {
	out := new(LikeListResponse)
	err := c.cc.Invoke(ctx, LikeList_LikeListSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeListServer is the server API for LikeList service.
// All implementations must embed UnimplementedLikeListServer
// for forward compatibility
type LikeListServer interface {
	LikeListSrv(context.Context, *LikeListRequest) (*LikeListResponse, error)
	mustEmbedUnimplementedLikeListServer()
}

// UnimplementedLikeListServer must be embedded to have forward compatible implementations.
type UnimplementedLikeListServer struct {
}

func (UnimplementedLikeListServer) LikeListSrv(context.Context, *LikeListRequest) (*LikeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeListSrv not implemented")
}
func (UnimplementedLikeListServer) mustEmbedUnimplementedLikeListServer() {}

// UnsafeLikeListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeListServer will
// result in compilation errors.
type UnsafeLikeListServer interface {
	mustEmbedUnimplementedLikeListServer()
}

func RegisterLikeListServer(s grpc.ServiceRegistrar, srv LikeListServer) {
	s.RegisterService(&LikeList_ServiceDesc, srv)
}

func _LikeList_LikeListSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeListServer).LikeListSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeList_LikeListSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeListServer).LikeListSrv(ctx, req.(*LikeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LikeList_ServiceDesc is the grpc.ServiceDesc for LikeList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LikeList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LikeList",
	HandlerType: (*LikeListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LikeListSrv",
			Handler:    _LikeList_LikeListSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/toktik/favorite/favorite.proto",
}
