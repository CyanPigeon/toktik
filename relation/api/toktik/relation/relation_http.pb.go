// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.19.4
// source: api/toktik/relation/relation.proto

package relation

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFollowActionFollowActionSrv = "/FollowAction/FollowActionSrv"

type FollowActionHTTPServer interface {
	FollowActionSrv(context.Context, *FollowActionRequest) (*FollowActionResponse, error)
}

func RegisterFollowActionHTTPServer(s *http.Server, srv FollowActionHTTPServer) {
	r := s.Route("/")
	r.POST("/douyin/relation/action", _FollowAction_FollowActionSrv0_HTTP_Handler(srv))
}

func _FollowAction_FollowActionSrv0_HTTP_Handler(srv FollowActionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowActionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowActionFollowActionSrv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowActionSrv(ctx, req.(*FollowActionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowActionResponse)
		return ctx.Result(200, reply)
	}
}

type FollowActionHTTPClient interface {
	FollowActionSrv(ctx context.Context, req *FollowActionRequest, opts ...http.CallOption) (rsp *FollowActionResponse, err error)
}

type FollowActionHTTPClientImpl struct {
	cc *http.Client
}

func NewFollowActionHTTPClient(client *http.Client) FollowActionHTTPClient {
	return &FollowActionHTTPClientImpl{client}
}

func (c *FollowActionHTTPClientImpl) FollowActionSrv(ctx context.Context, in *FollowActionRequest, opts ...http.CallOption) (*FollowActionResponse, error) {
	var out FollowActionResponse
	pattern := "/douyin/relation/action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFollowActionFollowActionSrv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationFollowListFollowListSrv = "/FollowList/FollowListSrv"

type FollowListHTTPServer interface {
	FollowListSrv(context.Context, *FollowListRequest) (*FollowListResponse, error)
}

func RegisterFollowListHTTPServer(s *http.Server, srv FollowListHTTPServer) {
	r := s.Route("/")
	r.GET("/douyin/relation/follow/list", _FollowList_FollowListSrv0_HTTP_Handler(srv))
}

func _FollowList_FollowListSrv0_HTTP_Handler(srv FollowListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowListFollowListSrv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowListSrv(ctx, req.(*FollowListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowListResponse)
		return ctx.Result(200, reply)
	}
}

type FollowListHTTPClient interface {
	FollowListSrv(ctx context.Context, req *FollowListRequest, opts ...http.CallOption) (rsp *FollowListResponse, err error)
}

type FollowListHTTPClientImpl struct {
	cc *http.Client
}

func NewFollowListHTTPClient(client *http.Client) FollowListHTTPClient {
	return &FollowListHTTPClientImpl{client}
}

func (c *FollowListHTTPClientImpl) FollowListSrv(ctx context.Context, in *FollowListRequest, opts ...http.CallOption) (*FollowListResponse, error) {
	var out FollowListResponse
	pattern := "/douyin/relation/follow/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFollowListFollowListSrv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationFollowerListFollowerListSrv = "/FollowerList/FollowerListSrv"

type FollowerListHTTPServer interface {
	FollowerListSrv(context.Context, *FollowerListRequest) (*FollowerListResponse, error)
}

func RegisterFollowerListHTTPServer(s *http.Server, srv FollowerListHTTPServer) {
	r := s.Route("/")
	r.GET("/douyin/relation/follower/list", _FollowerList_FollowerListSrv0_HTTP_Handler(srv))
}

func _FollowerList_FollowerListSrv0_HTTP_Handler(srv FollowerListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FollowerListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFollowerListFollowerListSrv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FollowerListSrv(ctx, req.(*FollowerListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowerListResponse)
		return ctx.Result(200, reply)
	}
}

type FollowerListHTTPClient interface {
	FollowerListSrv(ctx context.Context, req *FollowerListRequest, opts ...http.CallOption) (rsp *FollowerListResponse, err error)
}

type FollowerListHTTPClientImpl struct {
	cc *http.Client
}

func NewFollowerListHTTPClient(client *http.Client) FollowerListHTTPClient {
	return &FollowerListHTTPClientImpl{client}
}

func (c *FollowerListHTTPClientImpl) FollowerListSrv(ctx context.Context, in *FollowerListRequest, opts ...http.CallOption) (*FollowerListResponse, error) {
	var out FollowerListResponse
	pattern := "/douyin/relation/follower/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFollowerListFollowerListSrv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationFriendListFriendListSrv = "/FriendList/FriendListSrv"

type FriendListHTTPServer interface {
	FriendListSrv(context.Context, *FriendListRequest) (*FriendListResponse, error)
}

func RegisterFriendListHTTPServer(s *http.Server, srv FriendListHTTPServer) {
	r := s.Route("/")
	r.GET("/douyin/relation/friend/list", _FriendList_FriendListSrv0_HTTP_Handler(srv))
}

func _FriendList_FriendListSrv0_HTTP_Handler(srv FriendListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FriendListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFriendListFriendListSrv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FriendListSrv(ctx, req.(*FriendListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FriendListResponse)
		return ctx.Result(200, reply)
	}
}

type FriendListHTTPClient interface {
	FriendListSrv(ctx context.Context, req *FriendListRequest, opts ...http.CallOption) (rsp *FriendListResponse, err error)
}

type FriendListHTTPClientImpl struct {
	cc *http.Client
}

func NewFriendListHTTPClient(client *http.Client) FriendListHTTPClient {
	return &FriendListHTTPClientImpl{client}
}

func (c *FriendListHTTPClientImpl) FriendListSrv(ctx context.Context, in *FriendListRequest, opts ...http.CallOption) (*FriendListResponse, error) {
	var out FriendListResponse
	pattern := "/douyin/relation/friend/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFriendListFriendListSrv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
