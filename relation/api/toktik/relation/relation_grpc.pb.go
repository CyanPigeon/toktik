// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/toktik/relation/relation.proto

package relation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowAction_FollowActionSrv_FullMethodName = "/FollowAction/FollowActionSrv"
)

// FollowActionClient is the client API for FollowAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowActionClient interface {
	FollowActionSrv(ctx context.Context, in *FollowActionRequest, opts ...grpc.CallOption) (*FollowActionResponse, error)
}

type followActionClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowActionClient(cc grpc.ClientConnInterface) FollowActionClient {
	return &followActionClient{cc}
}

func (c *followActionClient) FollowActionSrv(ctx context.Context, in *FollowActionRequest, opts ...grpc.CallOption) (*FollowActionResponse, error) {
	out := new(FollowActionResponse)
	err := c.cc.Invoke(ctx, FollowAction_FollowActionSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowActionServer is the server API for FollowAction service.
// All implementations must embed UnimplementedFollowActionServer
// for forward compatibility
type FollowActionServer interface {
	FollowActionSrv(context.Context, *FollowActionRequest) (*FollowActionResponse, error)
	mustEmbedUnimplementedFollowActionServer()
}

// UnimplementedFollowActionServer must be embedded to have forward compatible implementations.
type UnimplementedFollowActionServer struct {
}

func (UnimplementedFollowActionServer) FollowActionSrv(context.Context, *FollowActionRequest) (*FollowActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowActionSrv not implemented")
}
func (UnimplementedFollowActionServer) mustEmbedUnimplementedFollowActionServer() {}

// UnsafeFollowActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowActionServer will
// result in compilation errors.
type UnsafeFollowActionServer interface {
	mustEmbedUnimplementedFollowActionServer()
}

func RegisterFollowActionServer(s grpc.ServiceRegistrar, srv FollowActionServer) {
	s.RegisterService(&FollowAction_ServiceDesc, srv)
}

func _FollowAction_FollowActionSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowActionServer).FollowActionSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowAction_FollowActionSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowActionServer).FollowActionSrv(ctx, req.(*FollowActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowAction_ServiceDesc is the grpc.ServiceDesc for FollowAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowAction",
	HandlerType: (*FollowActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowActionSrv",
			Handler:    _FollowAction_FollowActionSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/toktik/relation/relation.proto",
}

const (
	FollowList_FollowListSrv_FullMethodName = "/FollowList/FollowListSrv"
)

// FollowListClient is the client API for FollowList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowListClient interface {
	FollowListSrv(ctx context.Context, in *FollowListRequest, opts ...grpc.CallOption) (*FollowListResponse, error)
}

type followListClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowListClient(cc grpc.ClientConnInterface) FollowListClient {
	return &followListClient{cc}
}

func (c *followListClient) FollowListSrv(ctx context.Context, in *FollowListRequest, opts ...grpc.CallOption) (*FollowListResponse, error) {
	out := new(FollowListResponse)
	err := c.cc.Invoke(ctx, FollowList_FollowListSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowListServer is the server API for FollowList service.
// All implementations must embed UnimplementedFollowListServer
// for forward compatibility
type FollowListServer interface {
	FollowListSrv(context.Context, *FollowListRequest) (*FollowListResponse, error)
	mustEmbedUnimplementedFollowListServer()
}

// UnimplementedFollowListServer must be embedded to have forward compatible implementations.
type UnimplementedFollowListServer struct {
}

func (UnimplementedFollowListServer) FollowListSrv(context.Context, *FollowListRequest) (*FollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowListSrv not implemented")
}
func (UnimplementedFollowListServer) mustEmbedUnimplementedFollowListServer() {}

// UnsafeFollowListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowListServer will
// result in compilation errors.
type UnsafeFollowListServer interface {
	mustEmbedUnimplementedFollowListServer()
}

func RegisterFollowListServer(s grpc.ServiceRegistrar, srv FollowListServer) {
	s.RegisterService(&FollowList_ServiceDesc, srv)
}

func _FollowList_FollowListSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowListServer).FollowListSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowList_FollowListSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowListServer).FollowListSrv(ctx, req.(*FollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowList_ServiceDesc is the grpc.ServiceDesc for FollowList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowList",
	HandlerType: (*FollowListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowListSrv",
			Handler:    _FollowList_FollowListSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/toktik/relation/relation.proto",
}

const (
	FollowerList_FollowerListSrv_FullMethodName = "/FollowerList/FollowerListSrv"
)

// FollowerListClient is the client API for FollowerList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerListClient interface {
	FollowerListSrv(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error)
}

type followerListClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerListClient(cc grpc.ClientConnInterface) FollowerListClient {
	return &followerListClient{cc}
}

func (c *followerListClient) FollowerListSrv(ctx context.Context, in *FollowerListRequest, opts ...grpc.CallOption) (*FollowerListResponse, error) {
	out := new(FollowerListResponse)
	err := c.cc.Invoke(ctx, FollowerList_FollowerListSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerListServer is the server API for FollowerList service.
// All implementations must embed UnimplementedFollowerListServer
// for forward compatibility
type FollowerListServer interface {
	FollowerListSrv(context.Context, *FollowerListRequest) (*FollowerListResponse, error)
	mustEmbedUnimplementedFollowerListServer()
}

// UnimplementedFollowerListServer must be embedded to have forward compatible implementations.
type UnimplementedFollowerListServer struct {
}

func (UnimplementedFollowerListServer) FollowerListSrv(context.Context, *FollowerListRequest) (*FollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerListSrv not implemented")
}
func (UnimplementedFollowerListServer) mustEmbedUnimplementedFollowerListServer() {}

// UnsafeFollowerListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerListServer will
// result in compilation errors.
type UnsafeFollowerListServer interface {
	mustEmbedUnimplementedFollowerListServer()
}

func RegisterFollowerListServer(s grpc.ServiceRegistrar, srv FollowerListServer) {
	s.RegisterService(&FollowerList_ServiceDesc, srv)
}

func _FollowerList_FollowerListSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerListServer).FollowerListSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerList_FollowerListSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerListServer).FollowerListSrv(ctx, req.(*FollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowerList_ServiceDesc is the grpc.ServiceDesc for FollowerList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowerList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowerList",
	HandlerType: (*FollowerListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowerListSrv",
			Handler:    _FollowerList_FollowerListSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/toktik/relation/relation.proto",
}

const (
	FriendList_FriendListSrv_FullMethodName = "/FriendList/FriendListSrv"
)

// FriendListClient is the client API for FriendList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendListClient interface {
	FriendListSrv(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error)
}

type friendListClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendListClient(cc grpc.ClientConnInterface) FriendListClient {
	return &friendListClient{cc}
}

func (c *friendListClient) FriendListSrv(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error) {
	out := new(FriendListResponse)
	err := c.cc.Invoke(ctx, FriendList_FriendListSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendListServer is the server API for FriendList service.
// All implementations must embed UnimplementedFriendListServer
// for forward compatibility
type FriendListServer interface {
	FriendListSrv(context.Context, *FriendListRequest) (*FriendListResponse, error)
	mustEmbedUnimplementedFriendListServer()
}

// UnimplementedFriendListServer must be embedded to have forward compatible implementations.
type UnimplementedFriendListServer struct {
}

func (UnimplementedFriendListServer) FriendListSrv(context.Context, *FriendListRequest) (*FriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendListSrv not implemented")
}
func (UnimplementedFriendListServer) mustEmbedUnimplementedFriendListServer() {}

// UnsafeFriendListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendListServer will
// result in compilation errors.
type UnsafeFriendListServer interface {
	mustEmbedUnimplementedFriendListServer()
}

func RegisterFriendListServer(s grpc.ServiceRegistrar, srv FriendListServer) {
	s.RegisterService(&FriendList_ServiceDesc, srv)
}

func _FriendList_FriendListSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendListServer).FriendListSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendList_FriendListSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendListServer).FriendListSrv(ctx, req.(*FriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendList_ServiceDesc is the grpc.ServiceDesc for FriendList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FriendList",
	HandlerType: (*FriendListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FriendListSrv",
			Handler:    _FriendList_FriendListSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/toktik/relation/relation.proto",
}
