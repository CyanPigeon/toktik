// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.1
// source: api/toktik/feed/feed.proto

package feed

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFeedFeedSrv = "/Feed/FeedSrv"

type FeedHTTPServer interface {
	FeedSrv(context.Context, *FeedRequest) (*FeedResponse, error)
}

func RegisterFeedHTTPServer(s *http.Server, srv FeedHTTPServer) {
	r := s.Route("/")
	r.GET("/douyin/feed", _Feed_FeedSrv0_HTTP_Handler(srv))
}

func _Feed_FeedSrv0_HTTP_Handler(srv FeedHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FeedRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeedFeedSrv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FeedSrv(ctx, req.(*FeedRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FeedResponse)
		return ctx.JSON(200, reply)
	}
}

type FeedHTTPClient interface {
	FeedSrv(ctx context.Context, req *FeedRequest, opts ...http.CallOption) (rsp *FeedResponse, err error)
}

type FeedHTTPClientImpl struct {
	cc *http.Client
}

func NewFeedHTTPClient(client *http.Client) FeedHTTPClient {
	return &FeedHTTPClientImpl{client}
}

func (c *FeedHTTPClientImpl) FeedSrv(ctx context.Context, in *FeedRequest, opts ...http.CallOption) (*FeedResponse, error) {
	var out FeedResponse
	pattern := "/douyin/feed"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeedFeedSrv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
