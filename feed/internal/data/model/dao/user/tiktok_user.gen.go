// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package user

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"feed/internal/data/model"
)

func newDbUser(db *gorm.DB, opts ...gen.DOOption) dbUser {
	_dbUser := dbUser{}

	_dbUser.dbUserDo.UseDB(db, opts...)
	_dbUser.dbUserDo.UseModel(&model.DbUser{})

	tableName := _dbUser.dbUserDo.TableName()
	_dbUser.ALL = field.NewAsterisk(tableName)
	_dbUser.UID = field.NewInt64(tableName, "uid")
	_dbUser.Usrename = field.NewString(tableName, "usrename")
	_dbUser.Password = field.NewString(tableName, "password")
	_dbUser.Avatar = field.NewString(tableName, "avatar")
	_dbUser.BackgroundImg = field.NewString(tableName, "background_img")
	_dbUser.TotalFavorited = field.NewInt64(tableName, "total_favorited")
	_dbUser.FellowCount = field.NewInt64(tableName, "fellow_count")
	_dbUser.FellowerCount = field.NewInt64(tableName, "fellower_count")
	_dbUser.VideoCount = field.NewInt64(tableName, "video_count")
	_dbUser.CreatedBy = field.NewInt64(tableName, "created_by")
	_dbUser.CreatedTime = field.NewTime(tableName, "created_time")
	_dbUser.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_dbUser.UpdatedTime = field.NewTime(tableName, "updated_time")
	_dbUser.Delete = field.NewBool(tableName, "delete")
	_dbUser.Signature = field.NewString(tableName, "signature")
	_dbUser.FavoriteCount = field.NewInt64(tableName, "favorite_count")

	_dbUser.fillFieldMap()

	return _dbUser
}

type dbUser struct {
	dbUserDo dbUserDo

	ALL            field.Asterisk
	UID            field.Int64  // UID
	Usrename       field.String // 用户昵称
	Password       field.String // 加密后的密码
	Avatar         field.String // 头像;头像地址，有默认头像
	BackgroundImg  field.String // 背景图片;有默认地址
	TotalFavorited field.Int64  // 总点赞数;默认0
	FellowCount    field.Int64  // 关注人数;关注数量，默认0
	FellowerCount  field.Int64  // 被关注人数;被关注数量，默认0
	VideoCount     field.Int64  // 作品数量;作品数量，默认0
	CreatedBy      field.Int64  // 创建人;创建人
	CreatedTime    field.Time   // 创建时间;创建时间
	UpdatedBy      field.Int64  // 更新人
	UpdatedTime    field.Time   // 更新时间;更新时间
	Delete         field.Bool   // 是否删除;是否删除
	Signature      field.String // 个人描述
	FavoriteCount  field.Int64  // 点赞别人总数量

	fieldMap map[string]field.Expr
}

func (d dbUser) Table(newTableName string) *dbUser {
	d.dbUserDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dbUser) As(alias string) *dbUser {
	d.dbUserDo.DO = *(d.dbUserDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dbUser) updateTableName(table string) *dbUser {
	d.ALL = field.NewAsterisk(table)
	d.UID = field.NewInt64(table, "uid")
	d.Usrename = field.NewString(table, "usrename")
	d.Password = field.NewString(table, "password")
	d.Avatar = field.NewString(table, "avatar")
	d.BackgroundImg = field.NewString(table, "background_img")
	d.TotalFavorited = field.NewInt64(table, "total_favorited")
	d.FellowCount = field.NewInt64(table, "fellow_count")
	d.FellowerCount = field.NewInt64(table, "fellower_count")
	d.VideoCount = field.NewInt64(table, "video_count")
	d.CreatedBy = field.NewInt64(table, "created_by")
	d.CreatedTime = field.NewTime(table, "created_time")
	d.UpdatedBy = field.NewInt64(table, "updated_by")
	d.UpdatedTime = field.NewTime(table, "updated_time")
	d.Delete = field.NewBool(table, "delete")
	d.Signature = field.NewString(table, "signature")
	d.FavoriteCount = field.NewInt64(table, "favorite_count")

	d.fillFieldMap()

	return d
}

func (d *dbUser) WithContext(ctx context.Context) IDbUserDo { return d.dbUserDo.WithContext(ctx) }

func (d dbUser) TableName() string { return d.dbUserDo.TableName() }

func (d dbUser) Alias() string { return d.dbUserDo.Alias() }

func (d dbUser) Columns(cols ...field.Expr) gen.Columns { return d.dbUserDo.Columns(cols...) }

func (d *dbUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dbUser) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 16)
	d.fieldMap["uid"] = d.UID
	d.fieldMap["usrename"] = d.Usrename
	d.fieldMap["password"] = d.Password
	d.fieldMap["avatar"] = d.Avatar
	d.fieldMap["background_img"] = d.BackgroundImg
	d.fieldMap["total_favorited"] = d.TotalFavorited
	d.fieldMap["fellow_count"] = d.FellowCount
	d.fieldMap["fellower_count"] = d.FellowerCount
	d.fieldMap["video_count"] = d.VideoCount
	d.fieldMap["created_by"] = d.CreatedBy
	d.fieldMap["created_time"] = d.CreatedTime
	d.fieldMap["updated_by"] = d.UpdatedBy
	d.fieldMap["updated_time"] = d.UpdatedTime
	d.fieldMap["delete"] = d.Delete
	d.fieldMap["signature"] = d.Signature
	d.fieldMap["favorite_count"] = d.FavoriteCount
}

func (d dbUser) clone(db *gorm.DB) dbUser {
	d.dbUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dbUser) replaceDB(db *gorm.DB) dbUser {
	d.dbUserDo.ReplaceDB(db)
	return d
}

type dbUserDo struct{ gen.DO }

type IDbUserDo interface {
	gen.SubQuery
	Debug() IDbUserDo
	WithContext(ctx context.Context) IDbUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDbUserDo
	WriteDB() IDbUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDbUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDbUserDo
	Not(conds ...gen.Condition) IDbUserDo
	Or(conds ...gen.Condition) IDbUserDo
	Select(conds ...field.Expr) IDbUserDo
	Where(conds ...gen.Condition) IDbUserDo
	Order(conds ...field.Expr) IDbUserDo
	Distinct(cols ...field.Expr) IDbUserDo
	Omit(cols ...field.Expr) IDbUserDo
	Join(table schema.Tabler, on ...field.Expr) IDbUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDbUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDbUserDo
	Group(cols ...field.Expr) IDbUserDo
	Having(conds ...gen.Condition) IDbUserDo
	Limit(limit int) IDbUserDo
	Offset(offset int) IDbUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDbUserDo
	Unscoped() IDbUserDo
	Create(values ...*model.DbUser) error
	CreateInBatches(values []*model.DbUser, batchSize int) error
	Save(values ...*model.DbUser) error
	First() (*model.DbUser, error)
	Take() (*model.DbUser, error)
	Last() (*model.DbUser, error)
	Find() ([]*model.DbUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbUser, err error)
	FindInBatches(result *[]*model.DbUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DbUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDbUserDo
	Assign(attrs ...field.AssignExpr) IDbUserDo
	Joins(fields ...field.RelationField) IDbUserDo
	Preload(fields ...field.RelationField) IDbUserDo
	FirstOrInit() (*model.DbUser, error)
	FirstOrCreate() (*model.DbUser, error)
	FindByPage(offset int, limit int) (result []*model.DbUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDbUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dbUserDo) Debug() IDbUserDo {
	return d.withDO(d.DO.Debug())
}

func (d dbUserDo) WithContext(ctx context.Context) IDbUserDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dbUserDo) ReadDB() IDbUserDo {
	return d.Clauses(dbresolver.Read)
}

func (d dbUserDo) WriteDB() IDbUserDo {
	return d.Clauses(dbresolver.Write)
}

func (d dbUserDo) Session(config *gorm.Session) IDbUserDo {
	return d.withDO(d.DO.Session(config))
}

func (d dbUserDo) Clauses(conds ...clause.Expression) IDbUserDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dbUserDo) Returning(value interface{}, columns ...string) IDbUserDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dbUserDo) Not(conds ...gen.Condition) IDbUserDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dbUserDo) Or(conds ...gen.Condition) IDbUserDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dbUserDo) Select(conds ...field.Expr) IDbUserDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dbUserDo) Where(conds ...gen.Condition) IDbUserDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dbUserDo) Order(conds ...field.Expr) IDbUserDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dbUserDo) Distinct(cols ...field.Expr) IDbUserDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dbUserDo) Omit(cols ...field.Expr) IDbUserDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dbUserDo) Join(table schema.Tabler, on ...field.Expr) IDbUserDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dbUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDbUserDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dbUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IDbUserDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dbUserDo) Group(cols ...field.Expr) IDbUserDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dbUserDo) Having(conds ...gen.Condition) IDbUserDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dbUserDo) Limit(limit int) IDbUserDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dbUserDo) Offset(offset int) IDbUserDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dbUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDbUserDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dbUserDo) Unscoped() IDbUserDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dbUserDo) Create(values ...*model.DbUser) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dbUserDo) CreateInBatches(values []*model.DbUser, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dbUserDo) Save(values ...*model.DbUser) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dbUserDo) First() (*model.DbUser, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbUser), nil
	}
}

func (d dbUserDo) Take() (*model.DbUser, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbUser), nil
	}
}

func (d dbUserDo) Last() (*model.DbUser, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbUser), nil
	}
}

func (d dbUserDo) Find() ([]*model.DbUser, error) {
	result, err := d.DO.Find()
	return result.([]*model.DbUser), err
}

func (d dbUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DbUser, err error) {
	buf := make([]*model.DbUser, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dbUserDo) FindInBatches(result *[]*model.DbUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dbUserDo) Attrs(attrs ...field.AssignExpr) IDbUserDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dbUserDo) Assign(attrs ...field.AssignExpr) IDbUserDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dbUserDo) Joins(fields ...field.RelationField) IDbUserDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dbUserDo) Preload(fields ...field.RelationField) IDbUserDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dbUserDo) FirstOrInit() (*model.DbUser, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbUser), nil
	}
}

func (d dbUserDo) FirstOrCreate() (*model.DbUser, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DbUser), nil
	}
}

func (d dbUserDo) FindByPage(offset int, limit int) (result []*model.DbUser, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dbUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dbUserDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dbUserDo) Delete(models ...*model.DbUser) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dbUserDo) withDO(do gen.Dao) *dbUserDo {
	d.DO = *do.(*gen.DO)
	return d
}
