// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.1
// source: api/toktik/comment/comment.proto

package comment

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCommentActionCommentActionSrv = "/CommentAction/CommentActionSrv"

type CommentActionHTTPServer interface {
	CommentActionSrv(context.Context, *CommentActionRequest) (*CommentActionResponse, error)
}

func RegisterCommentActionHTTPServer(s *http.Server, srv CommentActionHTTPServer) {
	r := s.Route("/")
	r.POST("/douyin/comment/action", _CommentAction_CommentActionSrv0_HTTP_Handler(srv))
}

func _CommentAction_CommentActionSrv0_HTTP_Handler(srv CommentActionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentActionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentActionCommentActionSrv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CommentActionSrv(ctx, req.(*CommentActionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentActionResponse)
		return ctx.JSON(200, reply)
	}
}

type CommentActionHTTPClient interface {
	CommentActionSrv(ctx context.Context, req *CommentActionRequest, opts ...http.CallOption) (rsp *CommentActionResponse, err error)
}

type CommentActionHTTPClientImpl struct {
	cc *http.Client
}

func NewCommentActionHTTPClient(client *http.Client) CommentActionHTTPClient {
	return &CommentActionHTTPClientImpl{client}
}

func (c *CommentActionHTTPClientImpl) CommentActionSrv(ctx context.Context, in *CommentActionRequest, opts ...http.CallOption) (*CommentActionResponse, error) {
	var out CommentActionResponse
	pattern := "/douyin/comment/action"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCommentActionCommentActionSrv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationCommentListCommentListSrv = "/CommentList/CommentListSrv"

type CommentListHTTPServer interface {
	CommentListSrv(context.Context, *CommentListRequest) (*CommentListResponse, error)
}

func RegisterCommentListHTTPServer(s *http.Server, srv CommentListHTTPServer) {
	r := s.Route("/")
	r.GET("/douyin/comment/list", _CommentList_CommentListSrv0_HTTP_Handler(srv))
}

func _CommentList_CommentListSrv0_HTTP_Handler(srv CommentListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommentListCommentListSrv)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CommentListSrv(ctx, req.(*CommentListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentListResponse)
		return ctx.JSON(200, reply)
	}
}

type CommentListHTTPClient interface {
	CommentListSrv(ctx context.Context, req *CommentListRequest, opts ...http.CallOption) (rsp *CommentListResponse, err error)
}

type CommentListHTTPClientImpl struct {
	cc *http.Client
}

func NewCommentListHTTPClient(client *http.Client) CommentListHTTPClient {
	return &CommentListHTTPClientImpl{client}
}

func (c *CommentListHTTPClientImpl) CommentListSrv(ctx context.Context, in *CommentListRequest, opts ...http.CallOption) (*CommentListResponse, error) {
	var out CommentListResponse
	pattern := "/douyin/comment/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommentListCommentListSrv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
