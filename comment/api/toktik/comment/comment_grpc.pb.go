// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: api/toktik/comment/comment.proto

package comment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommentAction_CommentActionSrv_FullMethodName = "/CommentAction/CommentActionSrv"
)

// CommentActionClient is the client API for CommentAction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentActionClient interface {
	CommentActionSrv(ctx context.Context, in *CommentActionRequest, opts ...grpc.CallOption) (*CommentActionResponse, error)
}

type commentActionClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentActionClient(cc grpc.ClientConnInterface) CommentActionClient {
	return &commentActionClient{cc}
}

func (c *commentActionClient) CommentActionSrv(ctx context.Context, in *CommentActionRequest, opts ...grpc.CallOption) (*CommentActionResponse, error) {
	out := new(CommentActionResponse)
	err := c.cc.Invoke(ctx, CommentAction_CommentActionSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentActionServer is the server API for CommentAction service.
// All implementations must embed UnimplementedCommentActionServer
// for forward compatibility
type CommentActionServer interface {
	CommentActionSrv(context.Context, *CommentActionRequest) (*CommentActionResponse, error)
	mustEmbedUnimplementedCommentActionServer()
}

// UnimplementedCommentActionServer must be embedded to have forward compatible implementations.
type UnimplementedCommentActionServer struct {
}

func (UnimplementedCommentActionServer) CommentActionSrv(context.Context, *CommentActionRequest) (*CommentActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentActionSrv not implemented")
}
func (UnimplementedCommentActionServer) mustEmbedUnimplementedCommentActionServer() {}

// UnsafeCommentActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentActionServer will
// result in compilation errors.
type UnsafeCommentActionServer interface {
	mustEmbedUnimplementedCommentActionServer()
}

func RegisterCommentActionServer(s grpc.ServiceRegistrar, srv CommentActionServer) {
	s.RegisterService(&CommentAction_ServiceDesc, srv)
}

func _CommentAction_CommentActionSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentActionServer).CommentActionSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentAction_CommentActionSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentActionServer).CommentActionSrv(ctx, req.(*CommentActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentAction_ServiceDesc is the grpc.ServiceDesc for CommentAction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentAction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommentAction",
	HandlerType: (*CommentActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommentActionSrv",
			Handler:    _CommentAction_CommentActionSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/toktik/comment/comment.proto",
}

const (
	CommentList_CommentListSrv_FullMethodName = "/CommentList/CommentListSrv"
)

// CommentListClient is the client API for CommentList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentListClient interface {
	CommentListSrv(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error)
}

type commentListClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentListClient(cc grpc.ClientConnInterface) CommentListClient {
	return &commentListClient{cc}
}

func (c *commentListClient) CommentListSrv(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error) {
	out := new(CommentListResponse)
	err := c.cc.Invoke(ctx, CommentList_CommentListSrv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentListServer is the server API for CommentList service.
// All implementations must embed UnimplementedCommentListServer
// for forward compatibility
type CommentListServer interface {
	CommentListSrv(context.Context, *CommentListRequest) (*CommentListResponse, error)
	mustEmbedUnimplementedCommentListServer()
}

// UnimplementedCommentListServer must be embedded to have forward compatible implementations.
type UnimplementedCommentListServer struct {
}

func (UnimplementedCommentListServer) CommentListSrv(context.Context, *CommentListRequest) (*CommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentListSrv not implemented")
}
func (UnimplementedCommentListServer) mustEmbedUnimplementedCommentListServer() {}

// UnsafeCommentListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentListServer will
// result in compilation errors.
type UnsafeCommentListServer interface {
	mustEmbedUnimplementedCommentListServer()
}

func RegisterCommentListServer(s grpc.ServiceRegistrar, srv CommentListServer) {
	s.RegisterService(&CommentList_ServiceDesc, srv)
}

func _CommentList_CommentListSrv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentListServer).CommentListSrv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentList_CommentListSrv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentListServer).CommentListSrv(ctx, req.(*CommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentList_ServiceDesc is the grpc.ServiceDesc for CommentList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommentList",
	HandlerType: (*CommentListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CommentListSrv",
			Handler:    _CommentList_CommentListSrv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/toktik/comment/comment.proto",
}
